title: Pytest Experiment # Learning Lab course
tagline: Trying out CI with learning lab # Description for your course, displayed on the course catalog
description: Description # Longer description for course, displayed on the course's landing page

# Repository setup
# The following section template information for the repository
# This will be used when the repository is created for each individual learner

template:
  name: pytest-ci-course # the name of the repository when it is created for the learner
  repo: pytest-ci-template # the name of the repository to be copied, must have the same owner as the course. If omitted, the learner's repository will be empty.
  description: Description # (OPTIONAL) A one-line description which will be set for the GitHub repository.

# `before` block
# Actions to take place after the learner registers, but before they start interacting with their repo
# You can execute multiple actions in the `before` block. Refer to https://lab.github.com/docs/before-block
# Some actions require additional options as the one shown below, those options should appear below `type:`
# Below are example actions, full list at https://lab.github.com/docs/actions/
before:
  # 1. Bot creates [Tic tac toe game](https://github.com/githubtraining/actions-template) for the learner, protects main branch
  # 1. Bot opens a bug report explaining the app is broken, asks learner to figure out what's wrong by adding some testing.
  - type: updateBranchProtection
  - type: createIssue
    title: There's a bug!
    body: 01_NanoMFG.md
    store:
      first_issue_url: "{{ result.data.html_url }}"

# Repository artifacts:
# 1. Issue: There's a bug!
# 2. PR: CI for Node (learner)
# 3. PR: Add jest tests (bot)
# 4. Issue: A workflow for the entire team
# 5. PR: Improve CI (learner)
# 6. PR: A custom workflow (bot)
# 7. Issue: Congratulations

steps:
  # Step 1
  # 1. Learner opens a PR with a new workflow by using the [templated workflow for Node](https://github.com/actions/starter-workflows/blob/main/ci/node.js.yml)
  # 1. Bot leaves line-specific comments explaining the pieces that were just added from the templated workflow.
  - title: Run a templated workflow
    description: Wait for GitHub to run the templated workflow and report back the results
    event: check_suite.completed
    link: "{{ store.first_issue_url }}"
    actions:
      - type: respond
        with: 01_NanoMFG.md
      - type: gate
        left: "%payload.pull_request.title%"
        operator: ===
        right: CI for Python
        else:
          - type: respond
            with: e-failed-run.md
      - type: respond
        with: 01_NanoMFG.md

